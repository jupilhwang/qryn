name: 'Bump & Publish Multi-Arch'

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
      - '**.yml'
      - '**.yaml'

jobs:
  bump_version:
    name: 'Bump, Build & Publish npm package'
    runs-on: ubuntu-latest
    outputs:
      newTag: ${{ steps.version-bump.outputs.newTag }}
    steps:
      - name: 'Checkout source code'
        uses: 'actions/checkout@v3'
        with:
          ref: ${{ github.ref }}
      - name: 'cat package.json'
        run: cat ./package.json
      - name: 'Automated Version Bump'
        id: version-bump
        uses: 'phips28/gh-action-bump-version@master'
        with:
          tag-prefix: 'v'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Output Step'
        id: output-env
        env:
          NEW_TAG: ${{ steps.version-bump.outputs.newTag }}
        run: echo "::set-output name=release_number::$NEW_TAG"
      - name: Check NPM secret presence
        id: checksecrets
        shell: bash
        run: |
          if [ "$SECRET" == "" ]; then
            echo ::set-output name=secretspresent::false
          else
            echo ::set-output name=secretspresent::true
          fi
        env:
          SECRET: ${{ secrets.NPM_TOKEN }}
      - uses: actions/setup-node@v3
        if: ${{ steps.checksecrets.outputs.secretspresent }}
        with:
          node-version: 16
      - name: Publish to NPM
        if: ${{ steps.checksecrets.outputs.secretspresent }}
        run: |
          npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
          npm install
          npm publish --access public
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      
  publish:
    name: Build & Publish Multi-Arch Containers
    needs: bump_version
    if: (needs.bump_version.result == 'success') && (needs.bump_version.outputs.newTag != '')
    runs-on: ubuntu-latest
    steps:
      - name: Check Docker secret presence
        id: checkdocker
        shell: bash
        run: |
          if [ "$SECRET" == "" ]; then
            echo ::set-output name=secretspresent::false
          else
            echo ::set-output name=secretspresent::true
          fi
        env:
          SECRET: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker QEMU
        if: ${{ steps.checkdocker.outputs.secretspresent }}
        uses: docker/setup-qemu-action@v2
        with:
           platforms: amd64, arm64
      - name: Set up Docker Buildx
        if: ${{ steps.checkdocker.outputs.secretspresent }}
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        if: ${{ steps.checkdocker.outputs.secretspresent }}
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}  
      - name: Build and push to Docker Hub
        if: ${{ steps.checkdocker.outputs.secretspresent }}
        id: docker_build
        uses: docker/build-push-action@v3.0.0
        with:
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            qxip/qryn:latest
            qxip/qryn:${{ needs.bump_version.outputs.newTag }}
            qxip/cloki:latest
            qxip/cloki:${{ needs.bump_version.outputs.newTag }}
            
      - name: Log in to the GHCR registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push to GHCR
        uses: docker/build-push-action@v3.0.0
        with:
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
             ghcr.io/metrico/qryn:latest
             ghcr.io/metrico/qryn:${{ needs.bump_version.outputs.newTag }}
